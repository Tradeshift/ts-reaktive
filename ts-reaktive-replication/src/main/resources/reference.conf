# use akka's internal serializer for UnknownActorException instead of the default java serializer
# https://github.com/akka/akka/blob/master/akka-remote/src/main/resources/reference.conf#L93
akka.actor.additional-serialization-bindings {
  "com.tradeshift.reaktive.replication.actors.UnknownActorException" = akka-misc
}
ts-reaktive {
  replication {
    # Maximum clock drift to allow between cassandra writers.
    # When resuming replication operation, this amount of time will be rolled back and retried, since new events may have
    # arrived with earlier time stamps.
    allowed-clock-drift = 5 seconds
    
    # Number of aggregates to broadcast to new data centers in parallel
    parallellism = 8

    # Akka persistence plugin ID for the read journal to use. It must support EventsByTagQuery and CurrentEventsByPersistenceIdQuery.
    # The default here is for the akka cassandra plugin. 
    read-journal-plugin-id = "cassandra-query-journal"
  
    server {
      # Host to bind the server to
      host = "127.0.0.1"
      
      # TCP port to bind the server to
      port = 8623
      
      # Set this to the PEM-encoded, unencrypted, private key to enable HTTPS for the server
      key = ""
      
      # Set this to the PEM-encoded, concatenated, certificate chain to enable HTTPS for the server
      certificateChain = ""
    
      # Time to wait for acknowledgement from a persistent actor (and journal) after posting an event for storing
      timeout = 1 minute
      
      # Maximum number of events to keep in flight at the same time before blocking the web socket stream 
      max-in-flight = 100
    }
    
    cassandra {
      # All options below are ONLY applied when the keyspace is firstly created, and hence should be 
      # configured properly BEFORE launching a particular environment.

      # Name of the keyspace to create/use
      keyspace = "persistence_replication"
    
      # replication strategy to use. SimpleStrategy or NetworkTopologyStrategy
      replication-strategy = "SimpleStrategy"

      # Replication factor to use when creating a keyspace. Is only used when replication-strategy is SimpleStrategy.
      replication-factor = 1

      # Replication factor list for data centers, e.g. ["dc1:3", "dc2:2"]. Is only used when replication-strategy is NetworkTopologyStrategy.
      data-center-replication-factors = []  
    }
    
    local-datacenter {            
      # Name for this datacenter. This MUST be changed to a unique name per datacenter in production.
      name = "local"
    }
    
    client {
      # This section has SSL settings that serve as fallback for the settings per remote datacenter.
      # Configure your SSL settings here if you want to use the same key and/or certificate chain to connect to all remote datacenters. 
      
      # Set this to the PEM-encoded, unencrypted, private key to enable HTTPS for the client
      key = ""
      # Set this to the PEM-encoded, concatenated, certificate chain to enable HTTPS for the client
      certificateChain = ""
    }
    
    remote-datacenters {
      # The actual application must have sub-config sections here, one for each remote data center, with the following entries:
      #
      #     example-datacenter {
      #         # The URL to the replication server of the remote datacenter (according to that datacenter's ts-reaktive.replication.server config)  
      #         url = "ws://host:port"
      #         # Set this to the PEM-encoded, unencrypted, private key to enable HTTPS for the client 
      #         # (falls back to ts-reaktive.replication.client.key if not present)
      #         # key = ""
      #         # Set this to the PEM-encoded, concatenated, certificate chain to enable HTTPS for the client
      #         # (falls back to ts-reaktive.replication.client.certificateChain if not present)
      #         # certificateChain = ""
      #     }
      #
    }
    
    event-classifiers {
      # For each event type you want to replicate, you need to implement EventClassifier (with a no-args constructor)
      # and mention the fully-qualified class name here.
      #
      # "com.package.MyEvent" = "com.mypackage.MyEventClassifier"
    }
  }
}